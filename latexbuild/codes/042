// O(MlogN) O(1) Large N,M prime Mod
template<typename _Tp, const int BCSize> //add Mod as parameter;
struct Binomial_Coefficient {
    _Tp fac[BCSize + 1];
    _Tp inv[BCSize + 1];
    _Tp Mod;

    inline Binomial_Coefficient(const int &m) {    //add Mod as parameter;
        fac[0] = 1;
        Mod = m;
        for (int i = 1; i <= BCSize; i++)
            fac[i] = fac[i - 1] * i % Mod;

        inv[BCSize] = fpow<_Tp>(fac[BCSize], Mod - 2, Mod);
        // printf inv[BCSize] to get & save it;

        for (int i = BCSize - 1; ~i; i--)
            inv[i] = inv[i + 1] * (i + 1) % Mod;
    }

    inline _Tp operator()(const int &n, const int &m) {
        return fac[n] * inv[m] % Mod * inv[n - m] % Mod;
    }

    inline _Tp operator()(int n, int m, const int &mod) {
        this->Mod = mod;//if change mod;
        _Tp res = 1;
        while (n | m)res = res * (*this)(n % Mod, m % Mod) % Mod, n /= Mod, m /= Mod;
        return res;
    }
};

typedef Binomial_Coefficient<long long, 10000000> zuHeShu;
zuHeShu C = zuHeShu(1000000007);
*/
